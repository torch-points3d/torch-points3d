models:
    # This part describes a template model configuration
    MyTemplateModel: #name of your model. experiement.name should reference this
        type: TemplateModel #name of your model architecture. The modules will be looked for in models/<type>/nn.py
        down_conv:
            module_name: TemplateModelDownConv
            ratios: []
            radius: []
            down_conv_nn: [[], [], ...]
        up_conv:
            module_name: TemplateModelUpConv
            ratios: []
            radius: []
            up_conv_nn: [[], [], ...]
            up_k: []
            skip: True
        innermost:
            module_name: InnerModule
            aggr: max
            nn: []
        mlp_cls:
            nn: []
            dropout: 0.5

    PointNet:
        type: PointNet
        conv_type: "DENSE"
        input_stn:
            local_nn: [3, 64, 128, 1024]
            global_nn: [1024, 512, 256]
        local_nn_1: [3, 64, 64]
        feat_stn:
            k: 64
            local_nn: [64, 64, 128, 1024]
            global_nn: [1024, 512, 256]
        local_nn_2: [64, 64, 128, 1024]
        seg_nn: [1024 + 64, 512, 256, 128, N_CLS]

    pointcnn_small:
        type: PointCNN
        conv_type: "MESSAGE_PASSING"
        define_constants:
            L1_OUT: 32
            L2_OUT: 32
            INNER_OUT: 64
        down_conv:
            module_name: PointCNNConvDown
            inN: [2048, 768]
            outN: [768, 384]
            K: [8, 12]
            D: [1, 2]
            C1: [0, L1_OUT]
            C2: [L1_OUT, L2_OUT]
            hidden_channel: [64, None]
        innermost:
            module_name: PointCNNConvDown
            inN: 384
            outN: 128
            K: 16
            D: 2
            C1: L2_OUT
            C2: INNER_OUT
        up_conv:
            module_name: PointCNNConvUp
            K: [16, 12, 8]
            D: [6, 6, 6]
            C1: [INNER_OUT, 32 + L2_OUT, 32 + L1_OUT]
            C2: [32, 32, 32]
        mlp_cls:
            nn: [32, 32, 32, 32]
            dropout: 0.5

    pointcnn_shapenet:
        type: PointCNN
        conv_type: "MESSAGE_PASSING"
        down_conv:
            - module_name: PointCNNConvDown
              inN: 2048
              outN: 768
              K: 8
              D: 1
              C1: 0
              C2: 256
              hidden_channel: 64
            - module_name: PointCNNConvDown
              inN: 768
              outN: 384
              K: 12
              D: 2
              C1: 256
              C2: 256
        innermost:
            module_name: PointCNNConvDown
            inN: 384
            outN: 128
            K: 16
            D: 2
            C1: 256
            C2: 512
        up_conv:
            - module_name: PointCNNConvUp
              K: 16
              D: 6
              C1: 512
              C2: 256
            - module_name: PointCNNConvUp
              K: 12
              D: 6
              C1: 256
              C2: 256
            - module_name: PointCNNConvUp
              K: 8
              D: 6
              C1: 256
              C2: 64
        mlp_cls:
            nn: [64, 64, 64, 64, 64]
            dropout: 0.5

    # RandLA-Net: Efficient Semantic Segmentation of Large-Scale Point Clouds (https://arxiv.org/pdf/1911.11236.pdf)
    Randlanet_Res:
        type: RandLANet
        conv_type: "MESSAGE_PASSING"
        down_conv:
            module_name: RandLANetRes
            ratio: [[1, 1], [0.5, 0.5]]
            indim: [3, 32]
            outdim: [32, 128]
            point_pos_nn:
                [[[10, 8, FEAT], [10, 16, 16]], [[10, 16, 32], [10, 32, 64]]]
            attention_nn:
                [
                    [[2 * FEAT, 8, 2 * FEAT], [32, 64, 32]],
                    [[64, 128, 64], [128, 256, 128]],
                ]
            down_conv_nn:
                [
                    [[2 * FEAT, 8, 16], [32, 64, 32]],
                    [[64, 64, 64], [128, 128, 128]],
                ]
        innermost:
            module_name: GlobalBaseModule
            aggr: max
            nn: [131, 128]
        up_conv:
            module_name: FPModule
            up_conv_nn: [[128 + 128, 128], [128 + 32, 64], [64 + FEAT, 64]]
            up_k: [1, 1, 1]
            skip: True
        mlp_cls:
            nn: [64, 64, 64, 64, 64]
            dropout: 0.5

    Randlanet_Conv:
        type: RandLANet
        conv_type: "MESSAGE_PASSING"
        down_conv:
            module_name: RandlaConv
            ratio: [0.25, 0.25, 0.25]
            k: [16, 16, 16]
            point_pos_nn: [[10, 8, FEAT], [10, 8, 16], [10, 16, 32]]
            attention_nn: [[2 * FEAT, 8, 2 * FEAT], [32, 64, 32], [64, 128, 64]]
            down_conv_nn: [[2 * FEAT, 8, 16], [32, 64, 32], [64, 128, 128]]
        innermost:
            module_name: GlobalBaseModule
            aggr: max
            nn: [131, 128]
        up_conv:
            module_name: FPModule
            up_conv_nn:
                [
                    [128 + 128, 128],
                    [128 + 32, 64],
                    [64 + 16, 64],
                    [64 + FEAT, 64],
                ]
            up_k: [1, 1, 1, 1]
            skip: True
        mlp_cls:
            nn: [64, 64, 64, 64, 64]
            dropout: 0.5

    # Relation-Shape Convolutional Neural Network for Point Cloud Analysis (https://arxiv.org/abs/1904.07601)
    RSConv_2LD:
        type: RSConv
        conv_type: "MESSAGE_PASSING"
        down_conv:
            module_name: RSConv
            ratios: [0.2, 0.25]
            radius: [0.1, 0.2]
            local_nn: [[10, 8, FEAT], [10, 32, 64, 64]]
            down_conv_nn: [[FEAT, 16, 32, 64], [64, 64, 128]]
        innermost:
            module_name: GlobalBaseModule
            aggr: max
            nn: [128 + FEAT, 128]
        up_conv:
            module_name: FPModule
            ratios: [1, 0.25, 0.2]
            radius: [0.2, 0.2, 0.1]
            up_conv_nn: [[128 + 128, 64], [64 + 64, 64], [64, 64]]
            up_k: [1, 3, 3]
            skip: True
        mlp_cls:
            nn: [64, 64, 64, 64]
            dropout: 0.5

    RSConv_4LD:
        type: RSConv
        conv_type: "MESSAGE_PASSING"
        down_conv:
            module_name: RSConv
            ratios: [0.5, 0.5, 0.5, 0.5]
            radius: [0.1, 0.2, 0.3, 0.4]
            local_nn: [[10, 8, FEAT], [10, 16, 16], [10, 32, 32], [10, 64, 64]]
            down_conv_nn:
                [[FEAT, 16, 16], [16, 32, 32], [32, 64, 64], [64, 128, 128]]
        innermost:
            module_name: GlobalBaseModule
            aggr: max
            nn: [131, 128] #[3  + 128]
        up_conv:
            module_name: FPModule
            up_conv_nn:
                [
                    [128 + 128, 128],
                    [128 + 64, 64],
                    [64 + 32, 32],
                    [32 + 16, 32],
                    [32, 64],
                ]
            up_k: [1, 3, 3, 3, 3]
            skip: True
        mlp_cls:
            nn: [64, 64, 64, 64]
            dropout: 0.1

    # KPConv: Flexible and Deformable Convolution for Point Clouds (https://arxiv.org/abs/1904.08889)

    # KPConv support format_type="[PARTIAL_DENSE | MESSAGE_PASSING]"
    SimpleKPConv:
        type: KPConv
        conv_type: "MESSAGE_PASSING"
        down_conv:
            module_name: KPConv
            ratios: [0.2, 0.25]
            radius: [0.2, 0.4]
            down_conv_nn: [[FEAT, 32], [32, 64]]
        up_conv:
            module_name: FPModule
            up_conv_nn: [[128 + 64, 64], [64 + 32, 64], [64 + FEAT, 64]]
            up_k: [1, 3, 3]
            skip: True
        innermost:
            module_name: GlobalBaseModule
            aggr: max
            nn: [67, 128]
        mlp_cls:
            nn: [64, 64, 64, 64, 64]
            dropout: 0.5

    Resnet_BK_PD_KPConv:
        type: KPConv
        conv_type: "PARTIAL_DENSE"
        down_conv:
            module_name: ResnetBottleNeckPartialDense
            ratios: [0.25, 0.5, 0.5]
            radius: [0.2, 0.4, 0.6]
            max_num_neighbors: [16, 16, 32]
            down_conv_nn:
                [[FEAT, 32 // 4, 32], [32, 64 // 4, 64], [64, 128 // 4, 128]]
        up_conv:
            module_name: FPModule
            up_conv_nn:
                [
                    [128 + 128, 128],
                    [128 + 64, 64],
                    [64 + 32, 64],
                    [64 + FEAT, 64],
                ]
            up_k: [1, 3, 3, 5]
            skip: True
        innermost:
            module_name: GlobalPartialDenseBaseModule
            aggr: max
            nn: [128 + 3, 128]
        mlp_cls:
            nn: [64, 64, 64, 64, 64]
            dropout: 0.5

    ResidualKPConv:
        type: KPConv
        conv_type: "MESSAGE_PASSING"
        down_conv:
            module_name: ResidualBKPConv
            ratios: [0.2, 0.25]
            radius: [0.2, 0.4]
            down_conv_nn: [[FEAT, 32], [32, 64]]
        up_conv:
            module_name: ResidualUpsampleBKPConv
            radius: [1, 0.2, 0.1]
            up_conv_nn: [[128, 128], [64, 64], [64, 64]]
            mlp_nn: [[128 + 64, 64], [32 + 64, 64], [64 + FEAT, 64]]
            skip: True
        innermost:
            module_name: GlobalBaseModule
            aggr: max
            nn: [64 + FEAT, 128]
        mlp_cls:
            nn: [64, 64, 64, 64, 64]
            dropout: 0.5

    DeformableResidualKPConv:
        type: KPConv
        conv_type: "MESSAGE_PASSING"
        down_conv:
            module_name: LightDeformableKPConv
            ratios: [0.2, 0.25]
            radius: [0.2, 0.4]
            down_conv_nn: [[FEAT, 32], [32, 64]]
        up_conv:
            module_name: SimpleUpsampleKPConv
            radius: [1, 0.2, 0.1]
            up_conv_nn: [[128, 128], [64, 64], [64, 64]]
            mlp_nn: [[128 + 64, 64], [64 + 32, 64], [64 + FEAT, 64]]
            skip: True
        innermost:
            module_name: GlobalBaseModule
            aggr: max
            nn: [67, 128]
        mlp_cls:
            nn: [64, 64, 64, 64, 64]
            dropout: 0.5

    # PointNet++: Deep Hierarchical Feature Learning on Point Sets in a Metric Space (https://arxiv.org/abs/1706.02413)
    pointnet2:
        type: pointnet2
        conv_type: "MESSAGE_PASSING"
        down_conv:
            module_name: SAModule
            ratios: [0.2, 0.25]
            radius: [0.2, 0.4]
            down_conv_nn: [[FEAT + 3, 64, 64, 128], [128 + 3, 128, 128, 256]]
            radius_num_points: [64, 64]
        up_conv:
            module_name: FPModule
            up_conv_nn:
                [
                    [1024 + 256, 256, 256],
                    [256 + 128, 256, 128],
                    [128 + FEAT, 128, 128, 128],
                ]
            up_k: [1, 3, 3]
            skip: True
        innermost:
            module_name: GlobalBaseModule
            aggr: max
            nn: [256 + 3, 256, 512, 1024]
        mlp_cls:
            nn: [128, 128, 128]
            dropout: 0.5

    pointnet2ms:
        type: pointnet2
        conv_type: "MESSAGE_PASSING"
        down_conv:
            module_name: SAModule
            ratios: [0.25, 0.25]
            radius: [[0.1, 0.2, 0.4], [0.4, 0.8]]
            radius_num_points: [[32, 64, 128], [64, 128]]
            down_conv_nn: [[FEAT+3, 64, 96, 128], [128 * 3 + 3, 128, 196, 256]]
        up_conv:
            module_name: FPModule
            up_conv_nn:
                [
                    [1024 + 256 * 2, 256, 256],
                    [256 + 128 * 3, 128, 128],
                    [128 + FEAT, 128, 128],
                ]
            up_k: [1, 3, 3]
            skip: True
        innermost:
            module_name: GlobalBaseModule
            aggr: max
            nn: [256* 2 + 3, 256, 512, 1024]
        mlp_cls:
            nn: [128, 128, 128]
            dropout: 0.5

    pointnet2_original:
        type: pointnet2_dense
        conv_type: "DENSE"
        down_conv:
            module_name: PointNetMSGDown
            npoint: [1024, 256, 64, 16]
            radii: [[0.05, 0.1], [0.1, 0.2], [0.2, 0.4], [0.4, 0.8]]
            nsamples: [[16, 32], [16, 32], [16, 32], [16, 32]]
            down_conv_nn:
                [
                    [[FEAT, 16, 16, 32], [FEAT, 32, 32, 64]],
                    [[32 + 64, 64, 64, 128], [32 + 64, 64, 96, 128]],
                    [[128 + 128, 128, 196, 256], [128 + 128, 128, 196, 256]],
                    [[256 + 256, 256, 256, 512], [256 + 256, 256, 384, 512]],
                ]
        up_conv:
            module_name: DenseFPModule
            up_conv_nn:
                [
                    [512 + 512 + 256 + 256, 512, 512],
                    [512 + 128 + 128, 512, 512],
                    [512 + 64 + 32, 256, 256],
                    [256 + FEAT, 128, 128],
                ]
            skip: True
        mlp_cls:
            nn: [128, 128]
            dropout: 0.5

    pointnet2_onehot:
        type: pointnet2_dense
        conv_type: "DENSE"
        use_category: True
        down_conv:
            module_name: PointNetMSGDown
            npoint: [1024, 256, 64, 16]
            radii: [[0.05, 0.1], [0.1, 0.2], [0.2, 0.4], [0.4, 0.8]]
            nsamples: [[16, 32], [16, 32], [16, 32], [16, 32]]
            down_conv_nn:
                [
                    [[FEAT, 16, 16, 32], [FEAT, 32, 32, 64]],
                    [[32 + 64, 64, 64, 128], [32 + 64, 64, 96, 128]],
                    [[128 + 128, 128, 196, 256], [128 + 128, 128, 196, 256]],
                    [[256 + 256, 256, 256, 512], [256 + 256, 256, 384, 512]],
                ]
        up_conv:
            module_name: DenseFPModule
            up_conv_nn:
                [
                    [512 + 512 + 256 + 256, 512, 512],
                    [512 + 128 + 128, 512, 512],
                    [512 + 64 + 32, 256, 256],
                    [256 + FEAT, 128, 128],
                ]
            skip: True
        mlp_cls:
            nn: [128, 128]
            dropout: 0.5
