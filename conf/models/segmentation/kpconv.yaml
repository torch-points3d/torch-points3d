models:
    # KPConv: Flexible and Deformable Convolution for Point Clouds (https://arxiv.org/abs/1904.08889)
    # KPConv support format_type="[PARTIAL_DENSE | MESSAGE_PASSING]"
    SimpleKPConv:
        class: kpconv.KPConvSeg
        conv_type: "PARTIAL_DENSE"
        down_conv:
            module_name: ResnetBBlock
            grid_size: [0.2, 4]
            is_strided: [False, True]
            max_num_neighbors: [16, 16]
            has_bottleneck: [False, True]
            down_conv_nn: [[FEAT, 32], [32, 64]]
        up_conv:
            module_name: FPModule_PD
            up_conv_nn: [[128 + 64, 64], [64 + 32, 64], [64 + FEAT, 64]]
            up_k: [1, 3, 3]
            skip: True
        innermost:
            module_name: GlobalPartialDenseBaseModule
            aggr: max
            nn: [64 + 3, 128]
        mlp_cls:
            nn: [64, 64, 64, 64, 64]
            dropout: 0.5

    KPConvPaper:
        class: kpconv.KPConvPaper
        conv_type: "PARTIAL_DENSE"
        use_category: ${data.use_category}
        define_constants:
            in_grid_size: ${data.first_subsampling}
            in_feat: 64
            bn_momentum: 0.02
        down_conv:
            down_conv_nn:
                [
                    [[FEAT + 1, in_feat], [in_feat, 2*in_feat]],
                    [[2*in_feat, 2*in_feat], [2*in_feat, 4*in_feat]],
                    [[4*in_feat, 4*in_feat], [4*in_feat, 8*in_feat]],
                    [[8*in_feat, 8*in_feat], [8*in_feat, 16*in_feat]],
                    [[16*in_feat, 16*in_feat], [16*in_feat, 32*in_feat]],
                ]
            grid_size:
                [
                    [in_grid_size, in_grid_size],
                    [2*in_grid_size, 2*in_grid_size],
                    [4*in_grid_size, 4*in_grid_size],
                    [8*in_grid_size, 8*in_grid_size],
                    [16*in_grid_size, 16*in_grid_size],
                ]
            is_strided:
                [
                    [False, False],
                    [True, False],
                    [True, False],
                    [True, False],
                    [True, False],
                ]
            block_names:
                [
                    ["SimpleBlock", "ResnetBBlock"],
                    ["ResnetBBlock", "ResnetBBlock"],
                    ["ResnetBBlock", "ResnetBBlock"],
                    ["ResnetBBlock", "ResnetBBlock"],
                    ["ResnetBBlock", "ResnetBBlock"],
                ]
            has_bottleneck:
                [
                    [False, True],
                    [True, True],
                    [True, True],
                    [True, True],
                    [True, True],
                ]
            deformable:
                [
                    [False, False],
                    [False, False],
                    [False, False],
                    [False, False],
                    [False, False],
                ]
            max_num_neighbors:
                [[12, 12], [25, 25], [38, 38], [36, 36], [32, 32]]
            module_name: KPDualBlock
        up_conv:
            module_name: FPModule_PD
            up_conv_nn:
                [
                    [32*in_feat + 16*in_feat, 8*in_feat],
                    [8*in_feat + 8*in_feat, 4*in_feat],
                    [4*in_feat + 4*in_feat, 2*in_feat],
                    [2*in_feat + 2*in_feat, in_feat],
                ]
            skip: True
            up_k: [1,3,3,5]
            bn_momentum:
                [
                    bn_momentum,
                    bn_momentum,
                    bn_momentum,
                    bn_momentum,
                    bn_momentum,
                ]
        mlp_cls:
            nn: [in_feat, in_feat]
            dropout: 0.
            bn_momentum: bn_momentum
        loss_weights:
            lambda_reg: 1e-6
            
    KPConvDeformablePaper:
        class: kpconv.KPConvPaper
        conv_type: "PARTIAL_DENSE"
        use_category: ${data.use_category}
        define_constants:
            in_grid_size: ${data.first_subsampling}
            in_feat: 64
            bn_momentum: 0.02
        down_conv:
            down_conv_nn:
                [
                    [[FEAT + 1, in_feat], [in_feat, 2*in_feat]],
                    [[2*in_feat, 2*in_feat], [2*in_feat, 4*in_feat]],
                    [[4*in_feat, 4*in_feat], [4*in_feat, 8*in_feat]],
                    [[8*in_feat, 8*in_feat], [8*in_feat, 16*in_feat]],
                    [[16*in_feat, 16*in_feat], [16*in_feat, 32*in_feat]],
                ]
            grid_size:
                [
                    [in_grid_size, in_grid_size],
                    [2*in_grid_size, 2*in_grid_size],
                    [4*in_grid_size, 4*in_grid_size],
                    [8*in_grid_size, 8*in_grid_size],
                    [16*in_grid_size, 16*in_grid_size],
                ]
            is_strided:
                [
                    [False, False],
                    [True, False],
                    [True, False],
                    [True, False],
                    [True, False],
                ]
            block_names:
                [
                    ["SimpleBlock", "ResnetBBlock"],
                    ["ResnetBBlock", "ResnetBBlock"],
                    ["ResnetBBlock", "ResnetBBlock"],
                    ["ResnetBBlock", "ResnetBBlock"],
                    ["ResnetBBlock", "ResnetBBlock"],
                ]
            has_bottleneck:
                [
                    [False, True],
                    [True, True],
                    [True, True],
                    [True, True],
                    [True, True],
                ]
            deformable:
                [
                    [False, False],
                    [False, False],
                    [False, True],
                    [True, True],
                    [True, True],
                ]
            max_num_neighbors:
                [[12, 12], [25, 25], [38, 38], [36, 36], [32, 32]]
            module_name: KPDualBlock
        up_conv:
            module_name: FPModule_PD
            up_conv_nn:
                [
                    [32*in_feat + 16*in_feat, 8*in_feat],
                    [8*in_feat + 8*in_feat, 4*in_feat],
                    [4*in_feat + 4*in_feat, 2*in_feat],
                    [2*in_feat + 2*in_feat, in_feat],
                ]
            skip: True
            up_k: [1, 3, 3, 3]
            bn_momentum:
                [
                    bn_momentum,
                    bn_momentum,
                    bn_momentum,
                    bn_momentum,
                    bn_momentum,
                ]
        mlp_cls:
            nn: [in_feat, in_feat]
            dropout: 0.5
            bn_momentum: bn_momentum
        loss_weights:
            lambda_reg: 1e-5
            lambda_internal_losses: .01
